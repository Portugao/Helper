<?php
/**
 * Helper.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\HelperModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\HelperModule\Validator\Constraints as HelperAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for product class entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractProductClassEntity extends EntityAccess
{
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'productClass';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=1000000000)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @HelperAssert\ListEntry(entityName="productClass", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @ORM\Column(type="text", length=5000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="5000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * @ORM\Column(type="array")
     * @Assert\NotNull()
     * @Assert\Type(type="array")
     * @var array $productDetails
     */
    protected $productDetails = [];
    
    /**
     * @ORM\Column(type="boolean", nullable=true)
     * @Assert\Type(type="bool")
     * @var boolean $getAmazonDatas
     */
    protected $getAmazonDatas = false;
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $operation
     */
    protected $operation = 'ItemSearch';
    
    /**
     * It is possible to enter them comma seperated.
     Possible Values: Small, Medium, Large,
     BrowseNodes,Offers,OfferSummary,VariationSummary
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $responseGroup
     */
    protected $responseGroup = 'BrowseNodes,Large,Offers,OfferSummary,VariationSummary';
    
    /**
     * Possible values:
     All, Apparel, Books,Electronics,SportingGoods
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $searchIndex
     */
    protected $searchIndex = 'All';
    
    /**
     * Also a phrase, keywords without komma.
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $keywordsForImport
     */
    protected $keywordsForImport = '';
    
    /**
     * Valid values are:
     salesrank,reviewrank,pricerank,inverse-pricerank,
     -pubdate,titlerank,-titlerank,price,-price,
     -publication_date,-unit-sales,relevancerank
     * @ORM\Column(length=100)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="100")
     * @var string $sortOfImport
     */
    protected $sortOfImport = '';
    
    /**
     * comma and semicolon seperated
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $additionalFilter
     */
    protected $additionalFilter = 'Availability,Available;BrowseNode,3024033031';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $includeReviewSummary
     */
    protected $includeReviewSummary = false;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $itemPageForImport
     */
    protected $itemPageForImport = 5;
    
    /**
     * @ORM\Column(length=100)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="100")
     * @var string $associateKeyOfAmazon
     */
    protected $associateKeyOfAmazon = '';
    
    /**
     * @ORM\Column(type="date", nullable=true)
     * @Assert\Date()
     * @var date $amazonDate
     */
    protected $amazonDate;
    
    /**
     * @ORM\Column(type="time", nullable=true)
     * @Assert\Time()
     * @var time $amazonTime
     */
    protected $amazonTime;
    
    /**
     * @ORM\Column(type="integer", nullable=true)
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $amountOfImport
     */
    protected $amountOfImport = 0;
    
    
    
    /**
     * ProductClassEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($this->title !== $title) {
            $this->title = isset($title) ? $title : '';
        }
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($this->description !== $description) {
            $this->description = isset($description) ? $description : '';
        }
    }
    
    /**
     * Returns the product details.
     *
     * @return array
     */
    public function getProductDetails()
    {
        return $this->productDetails;
    }
    
    /**
     * Sets the product details.
     *
     * @param array $productDetails
     *
     * @return void
     */
    public function setProductDetails($productDetails)
    {
        if ($this->productDetails !== $productDetails) {
            $this->productDetails = isset($productDetails) ? $productDetails : '';
        }
    }
    
    /**
     * Returns the get amazon datas.
     *
     * @return boolean
     */
    public function getGetAmazonDatas()
    {
        return $this->getAmazonDatas;
    }
    
    /**
     * Sets the get amazon datas.
     *
     * @param boolean $getAmazonDatas
     *
     * @return void
     */
    public function setGetAmazonDatas($getAmazonDatas)
    {
        if (boolval($this->getAmazonDatas) !== boolval($getAmazonDatas)) {
            $this->getAmazonDatas = boolval($getAmazonDatas);
        }
    }
    
    /**
     * Returns the operation.
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->operation;
    }
    
    /**
     * Sets the operation.
     *
     * @param string $operation
     *
     * @return void
     */
    public function setOperation($operation)
    {
        if ($this->operation !== $operation) {
            $this->operation = isset($operation) ? $operation : '';
        }
    }
    
    /**
     * Returns the response group.
     *
     * @return string
     */
    public function getResponseGroup()
    {
        return $this->responseGroup;
    }
    
    /**
     * Sets the response group.
     *
     * @param string $responseGroup
     *
     * @return void
     */
    public function setResponseGroup($responseGroup)
    {
        if ($this->responseGroup !== $responseGroup) {
            $this->responseGroup = isset($responseGroup) ? $responseGroup : '';
        }
    }
    
    /**
     * Returns the search index.
     *
     * @return string
     */
    public function getSearchIndex()
    {
        return $this->searchIndex;
    }
    
    /**
     * Sets the search index.
     *
     * @param string $searchIndex
     *
     * @return void
     */
    public function setSearchIndex($searchIndex)
    {
        if ($this->searchIndex !== $searchIndex) {
            $this->searchIndex = isset($searchIndex) ? $searchIndex : '';
        }
    }
    
    /**
     * Returns the keywords for import.
     *
     * @return string
     */
    public function getKeywordsForImport()
    {
        return $this->keywordsForImport;
    }
    
    /**
     * Sets the keywords for import.
     *
     * @param string $keywordsForImport
     *
     * @return void
     */
    public function setKeywordsForImport($keywordsForImport)
    {
        if ($this->keywordsForImport !== $keywordsForImport) {
            $this->keywordsForImport = isset($keywordsForImport) ? $keywordsForImport : '';
        }
    }
    
    /**
     * Returns the sort of import.
     *
     * @return string
     */
    public function getSortOfImport()
    {
        return $this->sortOfImport;
    }
    
    /**
     * Sets the sort of import.
     *
     * @param string $sortOfImport
     *
     * @return void
     */
    public function setSortOfImport($sortOfImport)
    {
        if ($this->sortOfImport !== $sortOfImport) {
            $this->sortOfImport = isset($sortOfImport) ? $sortOfImport : '';
        }
    }
    
    /**
     * Returns the additional filter.
     *
     * @return string
     */
    public function getAdditionalFilter()
    {
        return $this->additionalFilter;
    }
    
    /**
     * Sets the additional filter.
     *
     * @param string $additionalFilter
     *
     * @return void
     */
    public function setAdditionalFilter($additionalFilter)
    {
        if ($this->additionalFilter !== $additionalFilter) {
            $this->additionalFilter = isset($additionalFilter) ? $additionalFilter : '';
        }
    }
    
    /**
     * Returns the include review summary.
     *
     * @return boolean
     */
    public function getIncludeReviewSummary()
    {
        return $this->includeReviewSummary;
    }
    
    /**
     * Sets the include review summary.
     *
     * @param boolean $includeReviewSummary
     *
     * @return void
     */
    public function setIncludeReviewSummary($includeReviewSummary)
    {
        if (boolval($this->includeReviewSummary) !== boolval($includeReviewSummary)) {
            $this->includeReviewSummary = boolval($includeReviewSummary);
        }
    }
    
    /**
     * Returns the item page for import.
     *
     * @return integer
     */
    public function getItemPageForImport()
    {
        return $this->itemPageForImport;
    }
    
    /**
     * Sets the item page for import.
     *
     * @param integer $itemPageForImport
     *
     * @return void
     */
    public function setItemPageForImport($itemPageForImport)
    {
        if (intval($this->itemPageForImport) !== intval($itemPageForImport)) {
            $this->itemPageForImport = intval($itemPageForImport);
        }
    }
    
    /**
     * Returns the associate key of amazon.
     *
     * @return string
     */
    public function getAssociateKeyOfAmazon()
    {
        return $this->associateKeyOfAmazon;
    }
    
    /**
     * Sets the associate key of amazon.
     *
     * @param string $associateKeyOfAmazon
     *
     * @return void
     */
    public function setAssociateKeyOfAmazon($associateKeyOfAmazon)
    {
        if ($this->associateKeyOfAmazon !== $associateKeyOfAmazon) {
            $this->associateKeyOfAmazon = isset($associateKeyOfAmazon) ? $associateKeyOfAmazon : '';
        }
    }
    
    /**
     * Returns the amazon date.
     *
     * @return date
     */
    public function getAmazonDate()
    {
        return $this->amazonDate;
    }
    
    /**
     * Sets the amazon date.
     *
     * @param date $amazonDate
     *
     * @return void
     */
    public function setAmazonDate($amazonDate)
    {
        if ($this->amazonDate !== $amazonDate) {
            if (is_object($amazonDate) && $amazonDate instanceOf \DateTime) {
                $this->amazonDate = $amazonDate;
            } elseif (null === $amazonDate || empty($amazonDate)) {
                $this->amazonDate = null;
            } else {
                $this->amazonDate = new \DateTime($amazonDate);
            }
        }
    }
    
    /**
     * Returns the amazon time.
     *
     * @return time
     */
    public function getAmazonTime()
    {
        return $this->amazonTime;
    }
    
    /**
     * Sets the amazon time.
     *
     * @param time $amazonTime
     *
     * @return void
     */
    public function setAmazonTime($amazonTime)
    {
        if ($this->amazonTime !== $amazonTime) {
            if (is_object($amazonTime) && $amazonTime instanceOf \DateTime) {
                $this->amazonTime = $amazonTime;
            } elseif (null === $amazonTime || empty($amazonTime)) {
                $this->amazonTime = null;
            } else {
                $this->amazonTime = new \DateTime($amazonTime);
            }
        }
    }
    
    /**
     * Returns the amount of import.
     *
     * @return integer
     */
    public function getAmountOfImport()
    {
        return $this->amountOfImport;
    }
    
    /**
     * Sets the amount of import.
     *
     * @param integer $amountOfImport
     *
     * @return void
     */
    public function setAmountOfImport($amountOfImport)
    {
        if (intval($this->amountOfImport) !== intval($amountOfImport)) {
            $this->amountOfImport = intval($amountOfImport);
        }
    }
    
    
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muhelpermodule.ui_hooks.productclasses';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Product class ' . $this->getKey() . ': ' . $this->getTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
    }
}
